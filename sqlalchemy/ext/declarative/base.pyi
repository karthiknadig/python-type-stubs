from . import clsregistry as clsregistry
from ... import event as event, exc as exc, util as util
from ...orm import class_mapper as class_mapper, mapper as mapper, mapperlib as mapperlib, synonym as synonym
from ...orm.attributes import QueryableAttribute as QueryableAttribute
from ...orm.base import InspectionAttr as InspectionAttr
from ...orm.interfaces import MapperProperty as MapperProperty
from ...orm.properties import ColumnProperty as ColumnProperty, CompositeProperty as CompositeProperty
from ...schema import Column as Column, Table as Table
from ...sql import expression as expression
from ...util import topological as topological
from sqlalchemy.orm import instrumentation as instrumentation
from typing import Any

declared_attr: Any
declarative_props: Any

class _MapperConfig:
    @classmethod
    def setup_mapping(cls, cls_: Any, classname: Any, dict_: Any) -> None: ...
    cls: Any = ...
    dict_: Any = ...
    classname: Any = ...
    persist_selectable: Any = ...
    properties: Any = ...
    declared_columns: Any = ...
    column_copies: Any = ...
    def __init__(self, cls_: Any, classname: Any, dict_: Any) -> None: ...
    def map(self): ...

class _DeferredMapperConfig(_MapperConfig):
    @property
    def cls(self): ...
    @cls.setter
    def cls(self, class_: Any) -> None: ...
    @classmethod
    def has_cls(cls, class_: Any): ...
    @classmethod
    def raise_unmapped_for_cls(cls, class_: Any) -> None: ...
    @classmethod
    def config_for_cls(cls, class_: Any): ...
    @classmethod
    def classes_for_base(cls, base_cls: Any, sort: bool = ...): ...
    def map(self): ...
